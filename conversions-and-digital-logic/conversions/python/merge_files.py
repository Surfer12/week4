#!/usr/bin/env python3
import os
import shutil
import sys

# Set the directory path to the current folder
folder_path = os.path.abspath(os.path.dirname(__file__))

# List of source files to merge.
# Note: unified_transformer.py is our target and will be backed up before merging.
files_to_merge = [
    "unified_transformer.py",
    "number_conversion_interactive.py",
    "circuit_visualization.py",
    "signed_representations.py",
    "number_conversion.py"
]

def validate_source_files():
    """Check if all source files exist and are readable."""
    missing_files = []
    for fname in files_to_merge:
        file_path = os.path.join(folder_path, fname)
        if not os.path.isfile(file_path):
            missing_files.append(fname)
        elif not os.access(file_path, os.R_OK):
            print(f"Error: No read permission for {fname}")
            sys.exit(1)

    if missing_files:
        print("Error: The following required files are missing:")
        for fname in missing_files:
            print(f"  - {fname}")
        sys.exit(1)

    print("All source files found and readable.")

# Validate files before proceeding
validate_source_files()

# Create a backup of the existing unified_transformer.py if it exists.
unified_file_path = os.path.join(folder_path, "unified_transformer.py")
backup_path = os.path.join(folder_path, "unified_transformer.py.bak")
if os.path.exists(unified_file_path):
    shutil.copy2(unified_file_path, backup_path)
    print(f"Backup created for unified_transformer.py at {backup_path}")

# Build header for the merged file
merged_content = "# Unified Transformer Monolith\n"
merged_content += "# This file has been automatically generated by merging the following files:\n"
for fname in files_to_merge:
    merged_content += "#   - {0}\n".format(fname)
merged_content += "\n\n"

# Read each file's content and store it
contents = {}
for fname in files_to_merge:
    file_path = os.path.join(folder_path, fname)
    with open(file_path, "r") as f:
        contents[fname] = f.read()

# Append each file's content with clear start and end delimiters
for fname in files_to_merge:
    merged_content += f"\n# ---- START OF {fname} ----\n\n"
    merged_content += contents[fname]
    merged_content += f"\n\n# ---- END OF {fname} ----\n\n"

# Write the merged content back to unified_transformer.py (overwriting it)
with open(unified_file_path, "w") as outf:
    outf.write(merged_content)

print("Merging complete. The file 'unified_transformer.py' now contains the merged code.")
print("All original files have been preserved as backups.")
