import org.neo4j.driver.*
import com.esotericsoftware.kryo.*
import com.esotericsoftware.kryo.io.*
import org.springframework.boot.SpringApplication
import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.web.bind.annotation.*

plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // Mockito for mocking
    testImplementation 'org.mockito:mockito-core:5.5.0'

    // Neo4j driver
    implementation 'org.neo4j.driver:neo4j-java-driver:5.10.0'

    // Hibernate for database
    implementation 'org.hibernate:hibernate-core:6.2.14.Final'

    // Spring Components
    implementation 'org.springframework:spring-jdbc:5.3.29'
    implementation 'org.springframework:spring-webmvc:5.3.29'

    // Serialization Utilities
    implementation 'com.esotericsoftware:kryo:5.5.0'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.thoughtworks.xstream:xstream:1.4.20'

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.4.11'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Use JUnit 5 platform for tests
// Add custom tasks for project-specific functionality
tasks.register('generateDocs') {
    group = 'documentation'
    description = 'Generates project documentation.'
    doLast {
        println 'Generating documentation...'
        // Placeholder for actual doc generation logic
    }
}

tasks.register('runNeo4jTest') {
    group = 'database'
    description = 'Runs a Neo4j database test.'
    doLast {
        println 'Starting Neo4j test...'
        def driver = GraphDatabase.driver("bolt://localhost:7687", AuthTokens.basic("neo4j", "password"))
        try {
            def session = driver.session()
            try {
                def greeting = session.writeTransaction { tx ->
                    def result = tx.run("CREATE (a:Greeting) SET a.message = \$message RETURN a.message + ', from node ' + id(a)",
                            Values.parameters("message", "hello, world"))
                    return result.single().get(0).asString()
                }
                println "Greeting from Neo4j: $greeting"
            } finally {
                session.close()
            }
        } finally {
            driver.close()
        }
    }
}

tasks.register('serializeTest') {
    group = 'serialization'
    description = 'Tests serialization and deserialization mechanisms.'
    doLast {
        println 'Testing serialization...'
        Kryo kryo = new Kryo();
        try (Output output = new Output(new FileOutputStream("file.bin"));
             Input input = new Input(new FileInputStream("file.bin"))) {

            class MyObject implements Serializable {
                private String name;
                private int value;
                MyObject(String name, int value) { this.name = name; this.value = value; }
                @Override public String toString() { return "MyObject{name='" + name + "', value=" + value + '}'; } }
            }

            MyObject object = new MyObject("test", 42);
            kryo.writeObject(output, object);
            MyObject deserialized = kryo.readObject(input, MyObject.class);
            println "Deserialized Object: $deserialized";
        }
    }
}

tasks.register('runWebServer') {
    group = 'web-app'
    description = 'Runs a basic Spring MVC web server.'
    doLast {
        println 'Starting Spring MVC application...'

        @SpringBootApplication
        class SpringMvcApp {
            static void main(String[] args) {
                SpringApplication.run(SpringMvcApp, args);
            }

            @RestController
            class GreetingController {
                @GetMapping("/greet")
                String greet(@RequestParam(value = "name", defaultValue = "World") String name) {
                    return "Hello, " + name + "!";
                }
            }
        }
    }
}
test {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}